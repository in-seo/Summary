clear === 터미널 창 내용 지우기

pwd  === 현재 위치의 경로  'print working directory'

ls === 디렉터리와 파일 이름리스트  -la추가시 상세정보와 숨긴파일까지 나옴  -t파일작성 순으로 표시  'list'

cd .. === 상위디렉터리 이동,  cd (디렉이름) === 지정디렉터리 진입  cd ~ === 홈디렉이동  'change directory'

~ 의 뜻 홈 디렉터리 -> c/Users/송현우 와 같음,  ./  === 현재 작업 중 디렉터리  ../ 현디렉의 상위디렉

rm -r "디렉이름"  === 삭제

cat "파일이름.txt" === 내용보여주기




작업 트리 -> 우리가 흔히 말하는 폴더
  인덱스-> 커밋을 실행하기 전의 저장소와 작업 트리 사이 존재하는 공간(스테이징)
저장소에 변경 사항을 기록하기 위해선 기록하고자 하는 모든 변경사항들이 '인덱스'에 존재해야함.
(작업 트리 -> 인덱스 -> 로컬 저장소 (-> 원격 저장소))

유저이름,이메일 설정하기  git config --global user.name "이름"
		          git config --global user.email "이메일"
정보확인-->  git config --list

▶ git init   으로 깃이 이 폴더를 신경쓰게 만들기
▶ git add .     --> 점은 모든 파일입니다.
▶ git status  로 스테이지에 add 되어있는지 확인
▶ git commit -m "커밋메시지"  커밋
▶ git remote add (별칭) (원격 저장소 주소)  로  github와 로컬 프로젝트 연결합니다.
∵ 별칭은 일반적으로 origin을 사용합니다.
▶ 원격<->로컬  잘 연결되었는지 확인하려면 git remote -v
▶ git push origin (브랜치이름)  
∵ 초기상태는 브랜치이름 : 'master'
∵웹 상의 원격 저장소로 내 파일을 업로드 하는 것을 'Push'라고 한다. -->원격 저장소==로컬 저장소


└만약에 오픈소스나 회사 프로젝트에 기여하고 싶다면  브랜치 사용.
브랜치(branch):브랜치란 독립적으로 어떤 작업을 진행하기 위한 개념
각각의 브랜치는 다른 브랜치의 영향을 받지 않기 때문에, 여러 작업을 동시에 진행할 수 있다.
default 브랜치는 'master' 브랜치이다.
＃ git branch "브랜치명"   대신--> git checkout -b "생성할 브랜치명"
＃ git add , git commit -m 사용하여 브랜치에 커밋하고
＃ 병합(merge)하기 위해  master 브랜치에 checkout
＃ git merge "브랜치명"
＃ merge후에는 기존 branch를  git branch -d "브랜치명" 으로 삭제합니다
◈ merge와 rebase의 차이
--> merge는 다른 브랜치에서 작업한 기록이 같이 딸려서 merge되지만
rebase는 master브랜치의 위치를 다른 브랜치의 head로 옮기기 때문에 
master 브랜치에서만 작업한 것처럼 보인다.

<태그 삽입>
§ git tag <tagname>
§ git tag -am "<주석>" <tagname>      태그 삭제 git tag -d <tagname>
§ git log --oneline  시 태그와 현재상황 파악가능합니다.

<커밋 취소>
git reset --hard <이전 COMMIT_ID>   --> commit_id는 git log로 알 수 있습니다.




